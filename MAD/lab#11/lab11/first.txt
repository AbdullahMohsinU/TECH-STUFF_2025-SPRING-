import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

void main() {
    runApp(MyApp());
}

class MyApp extends StatelessWidget {
    const MyApp({super.key});

    @override
    Widget build(BuildContext context) {
        return MaterialApp(
            debugShowCheckedModeBanner: false,
            title: 'Infinite List Pagination',
            theme: ThemeData(
                primarySwatch: Colors.pink,
            ),
            home: const HomePage(),
        );
    }
}
class HomePage extends StatefulWidget {
    const HomePage({super.key});

    @override
    State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
    // API base URL
    final _baseUrl = 'https://jsonplaceholder.typicode.com/posts';
    
    // Pagination variables
    int _page = 0;
    final int _limit = 20;
    bool _hasNextPage = true;
    
    // Loading states
    bool _isFirstLoadRunning = false;
    bool _isLoadMoreRunning = false;
    
    // List to hold fetched posts
    List _posts = [];
    
    // Scroll controller
    late ScrollController _controller;
    
    @override
    void initState() {
        super.initState();
        _firstLoad();
        _controller = ScrollController()..addListener(_loadMore);
    }
    
    @override
    void dispose() {
        _controller.removeListener(_loadMore);
        super.dispose();
    }
    
    // First load function
    void _firstLoad() async {
        setState(() {
            _isFirstLoadRunning = true;
        });
        
        try {
            final res = await http.get(Uri.parse("$_baseUrl?_page=$_page&_limit=$_limit"));
            setState(() {
                _posts = json.decode(res.body);
            });
        } catch (err) {
            if (kDebugMode) {
                print('Something went wrong');
            }
        }
        
        setState(() {
            _isFirstLoadRunning = false;
        });
    }
    
    // Load more function
    void _loadMore() async {
        if (_hasNextPage == true &&
            _isFirstLoadRunning == false &&
            _isLoadMoreRunning == false &&
            _controller.position.extentAfter < 300) {
            
            setState(() {
                _isLoadMoreRunning = true;
            });
            
            _page += 1;
            
            try {
                final res = await http.get(Uri.parse("$_baseUrl?_page=$_page&_limit=$_limit"));
                final List fetchedPosts = json.decode(res.body);
                
                if (fetchedPosts.isNotEmpty) {
                    setState(() {
                        _posts.addAll(fetchedPosts);
                    });
                } else {
                    setState(() {
                        _hasNextPage = false;
                    });
                }
            } catch (err) {
                if (kDebugMode) {
                    print('Something went wrong!');
                }
            }
            
            setState(() {
                _isLoadMoreRunning = false;
            });
        }
    }
    
    @override
    Widget build(BuildContext context) {
        return Scaffold(
            appBar: AppBar(
                title: const Text('Infinite List Pagination'),
            ),
            body: _isFirstLoadRunning
                ? const Center(
                    child: CircularProgressIndicator(),
                )
                : Column(
                    children: [
                        Expanded(
                            child: ListView.builder(
                                controller: _controller,
                                itemCount: _posts.length,
                                itemBuilder: (_, index) => Card(
                                    margin: const EdgeInsets.symmetric(
                                        vertical: 8, horizontal: 10),
                                    child: ListTile(
                                        title: Text(_posts[index]['title']),
                                        subtitle: Text(_posts[index]['body']),
                                    ),
                                ),
                            ),
                        ),
                        
                        // Show loading indicator when loading more
                        if (_isLoadMoreRunning)
                            const Padding(
                                padding: EdgeInsets.only(top: 10, bottom: 40),
                                child: Center(
                                    child: CircularProgressIndicator(),
                                ),
                            ),
                        
                        // Show message when no more data
                        if (_hasNextPage == false)
                            Container(
                                padding: const EdgeInsets.only(top: 30, bottom: 40),
                                color: Colors.amber,
                                child: const Center(
                                    child: Text('You have fetched all of the content'),
                                ),
                            ),
                    ],
                ),
        );
    }
}
